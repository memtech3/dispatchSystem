// <auto-generated />
using DispatchSystemBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DispatchSystemBackend.Migrations
{
    [DbContext(typeof(DispatchSystemBackendContext))]
    partial class DispatchSystemBackendContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CadEventEntityCadLogEntryEntity", b =>
                {
                    b.Property<int>("CadEventEntriesId")
                        .HasColumnType("integer");

                    b.Property<int>("CadLogEntriesId")
                        .HasColumnType("integer");

                    b.HasKey("CadEventEntriesId", "CadLogEntriesId");

                    b.HasIndex("CadLogEntriesId");

                    b.ToTable("CadEventEntityCadLogEntryEntity");
                });

            modelBuilder.Entity("CadEventEntityUnitEntity", b =>
                {
                    b.Property<int>("CadEventEntitiesId")
                        .HasColumnType("integer");

                    b.Property<int>("UnitsId")
                        .HasColumnType("integer");

                    b.HasKey("CadEventEntitiesId", "UnitsId");

                    b.HasIndex("UnitsId");

                    b.ToTable("CadEventEntityUnitEntity");
                });

            modelBuilder.Entity("CadLogEntryEntityUnitEntity", b =>
                {
                    b.Property<int>("CadLogEntriesId")
                        .HasColumnType("integer");

                    b.Property<int>("UnitsId")
                        .HasColumnType("integer");

                    b.HasKey("CadLogEntriesId", "UnitsId");

                    b.HasIndex("UnitsId");

                    b.ToTable("CadLogEntryEntityUnitEntity");
                });

            modelBuilder.Entity("DispatchSystemBackend.Models.CadEventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CadEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "synthesizing the alarm won't do anything, we need to back up the primary USB alarm!"
                        },
                        new
                        {
                            Id = 2,
                            Name = "programming the monitor won't do anything, we need to program the neural HDD monitor!"
                        },
                        new
                        {
                            Id = 3,
                            Name = "The HDD interface is down, override the optical interface so we can override the HDD interface!"
                        },
                        new
                        {
                            Id = 4,
                            Name = "synthesizing the hard drive won't do anything, we need to calculate the back-end XML hard drive!"
                        },
                        new
                        {
                            Id = 5,
                            Name = "You can't synthesize the sensor without indexing the wireless COM sensor!"
                        },
                        new
                        {
                            Id = 6,
                            Name = "You can't navigate the alarm without calculating the primary EXE alarm!"
                        },
                        new
                        {
                            Id = 7,
                            Name = "bypassing the port won't do anything, we need to generate the back-end SMTP port!"
                        },
                        new
                        {
                            Id = 8,
                            Name = "We need to transmit the multi-byte RSS hard drive!"
                        },
                        new
                        {
                            Id = 9,
                            Name = "The XSS hard drive is down, hack the bluetooth hard drive so we can hack the XSS hard drive!"
                        },
                        new
                        {
                            Id = 10,
                            Name = "If we bypass the array, we can get to the TCP array through the digital TCP array!"
                        });
                });

            modelBuilder.Entity("DispatchSystemBackend.Models.CadLogEntryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CadLogEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "synthesizing the alarm won't do anything, we need to back up the primary USB alarm!"
                        },
                        new
                        {
                            Id = 2,
                            Name = "programming the monitor won't do anything, we need to program the neural HDD monitor!"
                        },
                        new
                        {
                            Id = 3,
                            Name = "The HDD interface is down, override the optical interface so we can override the HDD interface!"
                        },
                        new
                        {
                            Id = 4,
                            Name = "synthesizing the hard drive won't do anything, we need to calculate the back-end XML hard drive!"
                        },
                        new
                        {
                            Id = 5,
                            Name = "You can't synthesize the sensor without indexing the wireless COM sensor!"
                        },
                        new
                        {
                            Id = 6,
                            Name = "You can't navigate the alarm without calculating the primary EXE alarm!"
                        },
                        new
                        {
                            Id = 7,
                            Name = "bypassing the port won't do anything, we need to generate the back-end SMTP port!"
                        },
                        new
                        {
                            Id = 8,
                            Name = "We need to transmit the multi-byte RSS hard drive!"
                        },
                        new
                        {
                            Id = 9,
                            Name = "The XSS hard drive is down, hack the bluetooth hard drive so we can hack the XSS hard drive!"
                        },
                        new
                        {
                            Id = 10,
                            Name = "If we bypass the array, we can get to the TCP array through the digital TCP array!"
                        });
                });

            modelBuilder.Entity("DispatchSystemBackend.Models.UnitEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pam Bergnaum",
                            Status = "Pam"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Clark Will",
                            Status = "Clark"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fred Langworth",
                            Status = "Fred"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Harriet Doyle",
                            Status = "Harriet"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Angela Hoppe",
                            Status = "Angela"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Garry Bailey",
                            Status = "Garry"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Laverne Kihn",
                            Status = "Laverne"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Isaac Shields",
                            Status = "Isaac"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nicolas Durgan",
                            Status = "Nicolas"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Bridget Batz",
                            Status = "Bridget"
                        });
                });

            modelBuilder.Entity("CadEventEntityCadLogEntryEntity", b =>
                {
                    b.HasOne("DispatchSystemBackend.Models.CadEventEntity", null)
                        .WithMany()
                        .HasForeignKey("CadEventEntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DispatchSystemBackend.Models.CadLogEntryEntity", null)
                        .WithMany()
                        .HasForeignKey("CadLogEntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CadEventEntityUnitEntity", b =>
                {
                    b.HasOne("DispatchSystemBackend.Models.CadEventEntity", null)
                        .WithMany()
                        .HasForeignKey("CadEventEntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DispatchSystemBackend.Models.UnitEntity", null)
                        .WithMany()
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CadLogEntryEntityUnitEntity", b =>
                {
                    b.HasOne("DispatchSystemBackend.Models.CadLogEntryEntity", null)
                        .WithMany()
                        .HasForeignKey("CadLogEntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DispatchSystemBackend.Models.UnitEntity", null)
                        .WithMany()
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
